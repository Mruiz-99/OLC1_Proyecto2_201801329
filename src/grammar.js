/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,15],$V3=[1,16],$V4=[1,24],$V5=[1,23],$V6=[1,22],$V7=[1,20],$V8=[1,21],$V9=[1,19],$Va=[1,18],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,28],$Vf=[1,29],$Vg=[5,7,21,24,26,29,32,34,35,36,39,40,42,44,47,48,49,50,51],$Vh=[1,35],$Vi=[1,40],$Vj=[1,49],$Vk=[1,42],$Vl=[1,41],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,53],$Vt=[1,65],$Vu=[1,64],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,78],$VG=[1,79],$VH=[1,80],$VI=[1,81],$VJ=[1,82],$VK=[10,11,31,37,43,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],$VL=[1,102],$VM=[10,31],$VN=[5,7,8,21,24,26,29,32,34,35,36,39,40,42,44,47,48,49,50,51,53,65,67,68,69,70,71,72],$VO=[10,11,31,37,43,64,66],$VP=[5,7,21,24,26,29,32,34,35,36,39,40,42,44,45,47,48,49,50,51],$VQ=[1,143],$VR=[10,11,31,37,43,52,53,58,59,60,61,62,63,64,65,66],$VS=[10,11,31,37,43,52,53,54,55,57,58,59,60,61,62,63,64,65,66],$VT=[10,11,31,37,43,58,59,60,61,62,63,64,65,66],$VU=[1,162],$VV=[1,166],$VW=[39,40,42];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"PRINT":7,"PARIZQ":8,"expresion":9,"PARDER":10,"PTCOMA":11,"DECLARACION":12,"ASIGNACION":13,"condIF":14,"switchCASE":15,"condWHILE":16,"condDOWHILE":17,"condFOR":18,"FUNCION":19,"LLAMADA":20,"IDENTIFICADOR":21,"INCREMENTO":22,"DECREMENTO":23,"BREAK":24,"L_exp":25,"EXEC":26,"TIPO":27,"BLOQUE":28,"VOID":29,"PARAMETROS":30,"COMA":31,"FOR":32,"refeshFOR":33,"WHILE":34,"DO":35,"SWITCH":36,"LLAVIZQ":37,"ListCase":38,"LLAVDER":39,"DEFAULT":40,"BLOQUECASE":41,"CASE":42,"DOSPTS":43,"IF":44,"ELSE":45,"IGUAL":46,"RENTERO":47,"Rbooleano":48,"RCADENA":49,"RCARACTER":50,"RDOUBLE":51,"MAS":52,"MENOS":53,"POR":54,"DIVIDIDO":55,"POTENCIA":56,"MOD":57,"DOBLEIGUAL":58,"NOIGUAL":59,"MENQUE":60,"MAYQUE":61,"MENIGQUE":62,"MAYIGQUE":63,"AND":64,"NOT":65,"OR":66,"TRUE":67,"FALSE":68,"CADENA":69,"CARACTER":70,"DECIMAL":71,"ENTERO":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PRINT",8:"PARIZQ",10:"PARDER",11:"PTCOMA",21:"IDENTIFICADOR",22:"INCREMENTO",23:"DECREMENTO",24:"BREAK",26:"EXEC",29:"VOID",31:"COMA",32:"FOR",34:"WHILE",35:"DO",36:"SWITCH",37:"LLAVIZQ",39:"LLAVDER",40:"DEFAULT",42:"CASE",43:"DOSPTS",44:"IF",45:"ELSE",46:"IGUAL",47:"RENTERO",48:"Rbooleano",49:"RCADENA",50:"RCARACTER",51:"RDOUBLE",52:"MAS",53:"MENOS",54:"POR",55:"DIVIDIDO",56:"POTENCIA",57:"MOD",58:"DOBLEIGUAL",59:"NOIGUAL",60:"MENQUE",61:"MAYQUE",62:"MENIGQUE",63:"MAYIGQUE",64:"AND",65:"NOT",66:"OR",67:"TRUE",68:"FALSE",69:"CADENA",70:"CARACTER",71:"DECIMAL",72:"ENTERO"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,5],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[6,3],[6,2],[20,4],[20,5],[20,5],[20,6],[19,5],[19,5],[19,6],[19,6],[30,4],[30,2],[18,8],[18,8],[33,2],[33,2],[33,1],[16,3],[17,5],[15,5],[15,7],[38,4],[38,3],[41,1],[41,2],[14,3],[14,5],[14,5],[28,2],[28,3],[13,4],[12,5],[12,3],[27,1],[27,1],[27,1],[27,1],[27,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,4],[25,3],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log(JSON.stringify($$[$0-1],null,2)); EjecutarBloque($$[$0-1],EntornoGlobal)  
break;
case 2:
 this.$=$$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$=[]; this.$.push($$[$0]); 
break;
case 4:
console.log("Sintactico","Error cerca del caracter : '"+yytext+"'",this._$.first_line,this._$.first_column);
break;
case 5:
 this.$ = print("print",$$[$0-2]); 
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14:
 this.$ = $$[$0] 
break;
case 15:
 this.$ = Incremento($$[$0-2]);
break;
case 16:
 this.$ = Decremento($$[$0-2]);
break;
case 17:
 this.$ = insBreak();
break;
case 18:
 this.$ = Llamada($$[$0-3],[]);
break;
case 19:
 this.$ = Llamada($$[$0-4],$$[$0-2]);
break;
case 20:
 this.$ = LlamadaEXEC($$[$0-3],[]);
break;
case 21:
 this.$ = LlamadaEXEC($$[$0-4],$$[$0-2]);
break;
case 22:
 this.$ = Funcion($$[$0-3],[],$$[$0-4],$$[$0]); 
break;
case 23:
 this.$ = Funcion($$[$0-3],[],"void",$$[$0]); 
break;
case 24:
 this.$ = Funcion($$[$0-4], $$[$0-2], $$[$0-5], $$[$0]); 
break;
case 25:
 this.$ = Funcion($$[$0-4], $$[$0-2], "void", $$[$0]); 
break;
case 26:
 this.$ = $$[$0-3]; this.$.push(Declaracion($$[$0], $$[$0-1], null));
break;
case 27:
 this.$ = []; this.$.push(Declaracion($$[$0], $$[$0-1], null));
break;
case 28: case 29:
 this.$ = condFOR($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 30:
 this.$ = Incremento($$[$0-1]);
break;
case 31:
 this.$ = Decremento($$[$0-1]);
break;
case 32:
this.$ = $$[$0];
break;
case 33:
 this.$ = condWHILE($$[$0-1], $$[$0]);
break;
case 34:
 this.$ = condDOWHILE($$[$0-1], $$[$0-3]);
break;
case 35:
 this.$ = Seleccionar($$[$0-3], $$[$0-1]); 
break;
case 36:
 this.$ = Seleccionar($$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 37:
 this.$ = $$[$0-3]; this.$.push(Caso($$[$0-1], $$[$0])); 
break;
case 38:
 this.$ = []; this.$.push(Caso($$[$0-1], $$[$0])); 
break;
case 39: case 44:
 this.$ = []; 
break;
case 40:
 this.$ = $$[$0]; 
break;
case 41:
 this.$ = condIF($$[$0-1], $$[$0], null); 
break;
case 42:
 this.$ = condIF($$[$0-3], $$[$0-2], Array ($$[$0]) );
break;
case 43:
 this.$ = condIF($$[$0-3], $$[$0-2], $$[$0] ); 
break;
case 45:
 this.$ = $$[$0-1]; 
break;
case 46:
 this.$ = Asignar($$[$0-3],$$[$0-1]); 
break;
case 47:
 this.$ = Declaracion($$[$0-3],$$[$0-4],$$[$0-1]); 
break;
case 48:
 this.$ = Declaracion($$[$0-1],$$[$0-2],null); 
break;
case 49:
 this.$ = "entero" 
break;
case 50:
 this.$ = "booleano" 
break;
case 51:
 this.$ = "cadena" 
break;
case 52:
 this.$ = "caracter" 
break;
case 53:
 this.$ = "doble" 
break;
case 54:
 this.$ = setOperacion($$[$0-2],$$[$0],"+");
break;
case 55:
 this.$ = setOperacion($$[$0-2],$$[$0],"-");
break;
case 56:
 this.$ = setOperacion($$[$0-2],$$[$0],"*");
break;
case 57:
 this.$ = setOperacion($$[$0-2],$$[$0],"/");
break;
case 58:
 this.$ = setOperacion($$[$0-2],$$[$0],"^");
break;
case 59:
 this.$ = setOperacion($$[$0-2],$$[$0],"%");
break;
case 60:
 this.$ = setOperacion($$[$0-2],$$[$0],"==");
break;
case 61:
 this.$ = setOperacion($$[$0-2],$$[$0],"!=");
break;
case 62:
 this.$ = setOperacion($$[$0-2],$$[$0],"<");
break;
case 63:
 this.$ = setOperacion($$[$0-2],$$[$0],">");
break;
case 64:
 this.$ = setOperacion($$[$0-2],$$[$0],"<=");
break;
case 65:
 this.$ = setOperacion($$[$0-2],$$[$0],">=");
break;
case 66:
 this.$ = setOperacion($$[$0-2],$$[$0],"and");
break;
case 67:
 this.$ = setOperacion($$[$0-2],$$[$0],"not");
break;
case 68:
 this.$ = setOperacion($$[$0-2],$$[$0],"or");
break;
case 69:
 this.$ = $$[$0-1]
break;
case 70:
 this.$ = setOperacionUnario($$[$0],"not");
break;
case 71:
 this.$ = setOperacionUnario($$[$0],"umenos");
break;
case 72:
 this.$ = setSimbolos(true,"booleano");
break;
case 73:
 this.$ = setSimbolos(false,"booleano");
break;
case 74:
 this.$ = setSimbolos($$[$0],"cadena");
break;
case 75:
 this.$ = setSimbolos($$[$0],"caracter");
break;
case 76:
 this.$ = setSimbolos(parseFloat($$[$0]),"doble");
break;
case 77:
 this.$ = setSimbolos($$[$0],"entero");
break;
case 78:
 this.$ = setSimbolos($$[$0],"identificador");
break;
case 79:
 this.$ = setSimbolos({Id: $$[$0-2], Params: []}, "funcion");
break;
case 80:
 this.$ = setSimbolos({Id: $$[$0-3], Params:$$[$0-1]}, "funcion");
break;
case 81:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 82:
 this.$ = []; this.$.push($$[$0]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:$V2,24:$V3,26:$V4,27:17,29:$V5,32:$V6,34:$V7,35:$V8,36:$V9,44:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{1:[3]},{5:[1,30],6:31,7:$V1,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:$V2,24:$V3,26:$V4,27:17,29:$V5,32:$V6,34:$V7,35:$V8,36:$V9,44:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),{8:[1,32]},o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),{8:[1,36],22:[1,33],23:[1,34],46:$Vh},{11:[1,37]},{21:[1,38]},{8:$Vi,9:39,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:50,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:51,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{28:52,37:$Vs},{8:[1,54]},{21:[1,55]},{21:[1,56]},{21:[2,49]},{21:[2,50]},{21:[2,51]},{21:[2,52]},{21:[2,53]},{1:[2,1]},o($Vg,[2,2]),{8:$Vi,9:57,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{11:[1,58]},{11:[1,59]},{8:$Vi,9:60,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:63,10:[1,61],21:$Vj,25:62,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},o($Vg,[2,17]),{8:[1,66],11:$Vt,46:$Vu},{28:67,37:$Vs,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{8:$Vi,9:83,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:84,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:85,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},o($VK,[2,72]),o($VK,[2,73]),o($VK,[2,74]),o($VK,[2,75]),o($VK,[2,76]),o($VK,[2,77]),o($VK,[2,78],{8:[1,86]}),{37:[1,87],52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{28:88,37:$Vs,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{34:[1,89]},{2:$V0,4:91,6:3,7:$V1,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:$V2,24:$V3,26:$V4,27:17,29:$V5,32:$V6,34:$V7,35:$V8,36:$V9,39:[1,90],44:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{12:92,13:93,21:[1,95],27:94,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{8:[1,96]},{8:[1,97]},{10:[1,98],52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($Vg,[2,15]),o($Vg,[2,16]),{11:[1,99],52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{11:[1,100]},{10:[1,101],31:$VL},o($VM,[2,82],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),{8:$Vi,9:103,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},o($VN,[2,48]),{10:[1,104],27:106,30:105,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},o($Vg,[2,41],{45:[1,107]}),{8:$Vi,9:108,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:109,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:110,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:111,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:112,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:113,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:114,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:115,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:116,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:117,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:118,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:119,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:120,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:121,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:122,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{10:[1,123],52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($VO,[2,70],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,65:$VI}),o($VK,[2,71]),{8:$Vi,9:63,10:[1,124],21:$Vj,25:125,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{38:126,42:[1,127]},o($Vg,[2,33]),{8:$Vi,9:128,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},o($VP,[2,44]),{6:31,7:$V1,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:$V2,24:$V3,26:$V4,27:17,29:$V5,32:$V6,34:$V7,35:$V8,36:$V9,39:[1,129],44:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{8:$Vi,9:130,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{8:$Vi,9:131,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{21:[1,132]},{46:$Vh},{10:[1,133],27:106,30:134,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},{8:$Vi,9:63,10:[1,135],21:$Vj,25:136,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{11:[1,137]},o([5,7,8,10,21,24,26,29,32,34,35,36,39,40,42,44,47,48,49,50,51,53,65,67,68,69,70,71,72],[2,46]),o($Vg,[2,18]),{11:[1,138]},{8:$Vi,9:139,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{11:[1,140],52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{28:141,37:$Vs},{10:[1,142],31:$VQ},{21:[1,144]},{14:145,28:146,37:$Vs,44:$Va},o($VR,[2,54],{54:$Vx,55:$Vy,56:$Vz,57:$VA}),o($VR,[2,55],{54:$Vx,55:$Vy,56:$Vz,57:$VA}),o($VS,[2,56],{56:$Vz}),o($VS,[2,57],{56:$Vz}),o($VS,[2,58]),o($VS,[2,59],{56:$Vz}),o($VT,[2,60],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA}),o($VT,[2,61],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA}),o($VT,[2,62],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA}),o($VT,[2,63],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA}),o($VT,[2,64],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA}),o($VT,[2,65],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA}),o($VO,[2,66],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,65:$VI}),o($VO,[2,67],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,65:$VI}),o([10,11,31,37,43,66],[2,68],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI}),o($VK,[2,69]),o($VK,[2,79]),{10:[1,147],31:$VL},{39:[1,148],40:[1,149],42:[1,150]},{8:$Vi,9:151,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{11:[1,152],52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($VP,[2,45]),{11:[1,153],52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{11:[1,154],52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{11:$Vt,46:$Vu},{28:155,37:$Vs},{10:[1,156],31:$VQ},{11:[1,157]},{10:[1,158],31:$VL},o($Vg,[2,5]),o($Vg,[2,19]),o($VM,[2,81],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($VN,[2,47]),o($Vg,[2,22]),{28:159,37:$Vs},{27:160,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf},o($VM,[2,27]),o($Vg,[2,42]),o($Vg,[2,43]),o($VK,[2,80]),o($Vg,[2,35]),{41:161,43:$VU},{8:$Vi,9:163,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{41:164,43:$VU,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($Vg,[2,34]),{13:167,21:$VV,33:165},{13:167,21:$VV,33:168},o($Vg,[2,23]),{28:169,37:$Vs},o($Vg,[2,20]),{11:[1,170]},o($Vg,[2,24]),{21:[1,171]},{39:[1,172]},o($VW,[2,39],{6:3,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,27:17,4:173,2:$V0,7:$V1,21:$V2,24:$V3,26:$V4,29:$V5,32:$V6,34:$V7,35:$V8,36:$V9,44:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf}),{41:174,43:$VU,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($VW,[2,38]),{10:[1,175]},{22:[1,176],23:[1,177],46:$Vh},{10:[2,32]},{10:[1,178]},o($Vg,[2,25]),o($Vg,[2,21]),o($VM,[2,26]),o($Vg,[2,36]),o($VW,[2,40],{12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,27:17,6:31,7:$V1,21:$V2,24:$V3,26:$V4,29:$V5,32:$V6,34:$V7,35:$V8,36:$V9,44:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf}),o($VW,[2,37]),{28:179,37:$Vs},{10:[2,30]},{10:[2,31]},{28:180,37:$Vs},o($Vg,[2,28]),o($Vg,[2,29])],
defaultActions: {25:[2,49],26:[2,50],27:[2,51],28:[2,52],29:[2,53],30:[2,1],167:[2,32],176:[2,30],177:[2,31]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var pilaCiclos = [];
    var pilaFunciones = [];
    var Errores = [];
    var principal = 0;
  	// entorno
  	const Entorno = function(anterior)
    {
    	return {
        	tablaSimbolos:new Map(),
          	anterior:anterior
        }
    }
  	var EntornoGlobal = Entorno(null)
  	//Ejecuciones
    function EjecutarBloque(instrucciones, ent)
	{
        var retorno=null;
        for(var elemento of instrucciones)
        {
        	switch(elemento.TipoInstruccion)
          	{
            	case "print":
                    var res=Evaluar(elemento.Operacion, ent);
                    console.log(res.Valor);
                    break;
                case "declaracion":
                    retorno = EjecutarDeclaracion(elemento, ent);
                    break;
                case "asignacion":
                    retorno = EjecutarAsignar(elemento, ent);
                    break;
                case "incremento":
                    retorno = EjecutarIncremento(elemento, ent);
                    break;
                case "decremento":
                    retorno = EjecutarDecremento(elemento, ent);
                    break;    
                case "hacer":
                    retorno = EjecutarHacer(elemento, ent);
                    break;
                case "if":
                    retorno = EjecutarIF(elemento, ent);
                    break;
                case "while":
                    retorno = EjecutarWHILE(elemento, ent);
                    break;
                case "dowhile":
                    retorno = EjecutarDOWHILE(elemento, ent);
                    break;    
                case "for":
                    retorno = EjecutarFOR(elemento, ent);
                    break;
                case "seleccionar":
                    retorno = EjecutarSeleccionar(elemento, ent);
                    break;
                case "funcion":
                    retorno = EjecutarFuncion(elemento,EntornoGlobal);
                    break;
                case "llamada":
                    EjecutarLlamada(elemento,ent);
                    retorno = null;
                    break;
                case "llamadaexec":
                    EjecutarLlamadaEXEC(elemento,ent);
                    retorno = null;
                    break;    
                case "retorno":
                    if (pilaFunciones.length>0)
                    {
                        retorno = elemento.Expresion;
                    }
                    else
                    {
                        console.log("Intruccion retorno fuera de una funcion")
                    }
                    break;
                case "insBreak":
                    if (pilaCiclos.length>0)
                    {
                        return elemento;
                    }
                    else
                    {
                        console.log("Intruccion insBreak fuera de un seleccionar o un ciclo")
                    }
                    
          	}
            if(retorno)
            {
                return retorno;
            }
        }
        return null;
    }
    //Expresion
    const setSimbolos = function(Valor,Tipo)
    {
        return {
            Valor:Valor,
            Tipo:Tipo
        }
    }
    const setOperacion= function(factor_izq,factor_der,Tipo)
    {
        return {
            factor_izq:factor_izq,
            factor_der:factor_der,
            Tipo:Tipo
        }
    }
    function setOperacionUnario(Operando,Tipo)
	{
        return {
            factor_izq:Operando,
            factor_der:null,
            Tipo:Tipo
        }
    }
    function Evaluar(Operacion,ent)
    {
        var Valorizq=null;
        var Valorder=null;
      	//Simbolos
        switch(Operacion.Tipo)
        {
            case "booleano":
                return setSimbolos(Operacion.Valor,Operacion.Tipo);
            case "cadena":
                return setSimbolos(Operacion.Valor,Operacion.Tipo);
			case "caracter":
                return setSimbolos(Operacion.Valor,Operacion.Tipo);
            case "doble":
                return setSimbolos(parseFloat(Operacion.Valor),Operacion.Tipo);
			case "entero":
                return setSimbolos(Number(Operacion.Valor),Operacion.Tipo);
          	case "identificador":
                var temp=ent;
                while(temp!=null)
                {
                    if(temp.tablaSimbolos.has(Operacion.Valor))
                    {
                        var valorID = temp.tablaSimbolos.get(Operacion.Valor);
                        return setSimbolos(valorID.Valor,valorID.Tipo);
                    }
                    temp=temp.anterior;
                }
                console.log("No existe la variable " + Operacion.Valor);
                return setSimbolos("@error@","error");
            case "funcion":
                var res = EjecutarLlamada(Llamada(Operacion.Valor.Id,Operacion.Valor.Params), ent)
                return res
        }
      	//Operaciones
        Valorizq=Evaluar(Operacion.factor_izq, ent);
        if(Operacion.factor_der!=null)
        {
            Valorder=Evaluar(Operacion.factor_der, ent);
        }
      	var tipoRetorno = "error";
      	// identificar qué operaciones sí podemos realizar dependiendo del tipo
    	switch(Valorizq.Tipo)
        {
          case "cadena":
            // cadena puede sumarse con cualquier otro tipo
            if(!Valorder){
            	tipoRetorno="cadena";
            	break;
            }
            switch(Valorder.Tipo)
            {
            	case "cadena":
				case "caracter":
              	case "entero":
				case "doble":
                case "booleano":
                	tipoRetorno = "cadena";	
                	break;
            }
            break;
		case "caracter":
            // caracter puede sumarse con cualquier otro tipo
            if(!Valorder){
            	tipoRetorno="caracter";
            	break;
            }
            switch(Valorder.Tipo)
            {
            	case "cadena":
                	tipoRetorno = "cadena";
                	break;
				case "caracter":
                	tipoRetorno = "cadena";
                	break;
              	case "entero":
                	tipoRetorno = "entero";
                	break;
				case "doble":
                	tipoRetorno = "doble";
                	break;
            }
            break;	
          case "entero":
            if(!Valorder){
            	tipoRetorno="entero";
              	break;
            }
            switch(Valorder.Tipo)
            {
                case "booleano":
                	tipoRetorno = "entero";
                	break;
                case "caracter":
                	tipoRetorno = "entero";
                	break;    
            	case "cadena":
                	tipoRetorno = "cadena";
                	break;
              	case "entero":
                	tipoRetorno = "entero";	
                	break;
				case "doble":
                	tipoRetorno = "doble";	
                	break;	
            }
            break;
		case "doble":
            if(!Valorder){
            	tipoRetorno="doble";
              	break;
            }
            switch(Valorder.Tipo)
            {
            	case "cadena":
                	tipoRetorno = "cadena";
                	break;
                case "caracter":
                	tipoRetorno = "doble";
                	break;    
              	case "entero":
                	tipoRetorno = "doble";	
                	break;
				case "doble":
                	tipoRetorno = "doble";	
                	break;	
                case "booleano":
                	tipoRetorno = "doble";
                	break;    
            }
            break;	
          case "booleano":
            if(!Valorder){
            	tipoRetorno="booleano";
              	break;
            }
            switch(Valorder.Tipo)
            {
            	case "booleano":
                	tipoRetorno = "booleano";
              		break;
                case "entero":
                	tipoRetorno = "entero";
                	break;
                case "doble":
                	tipoRetorno = "doble";
                	break; 
                case "cadena":
                	tipoRetorno = "cadena";
                	break;       
            }
            break;
        }
      
        switch (Operacion.Tipo)
        {
            case "+":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "entero":
            			return setSimbolos(Valorizq.Valor + Valorder.Valor, tipoRetorno);
					case "doble":
            			return setSimbolos(parseFloat(Valorizq.Valor + Valorder.Valor), tipoRetorno);
                }
                break;
            case "-":
                switch(tipoRetorno)
                {
                	case "entero":
            			return setSimbolos(Valorizq.Valor - Valorder.Valor, tipoRetorno);
                		break;
					case "doble":
            			return setSimbolos(parseFloat(Valorizq.Valor - Valorder.Valor), tipoRetorno);
                }
                break;
            case "umenos":
                switch(tipoRetorno)
                {
                	case "entero":
            			return setSimbolos(0-Valorizq.Valor, tipoRetorno);
					case "doble":
            			return setSimbolos(parseFloat(0-Valorizq.Valor), tipoRetorno);	
                }
                break;
            case "*":
                if(Valorder.Tipo != "booleano" && Valorizq.Tipo != "booleano" && Valorder.Tipo != "cadena" && Valorizq.Tipo != "cadena" && (Valorizq.Tipo != 'caracter' || Valorder.Tipo != 'caracter')) {

                switch(tipoRetorno)
                {
                	case "entero":
                    	return setSimbolos(Number(Valorizq.Valor * Valorder.Valor), tipoRetorno);
					case "doble":
                    	return setSimbolos(parseFloat(Valorizq.Valor * Valorder.Valor), tipoRetorno);	
                }
                
                }
                break;
            case "/":
                if(Valorder.Tipo != "booleano" && Valorizq.Tipo != "booleano" && Valorder.Tipo != "cadena" && Valorizq.Tipo != "cadena" && (Valorizq.Tipo != 'caracter' || Valorder.Tipo != 'caracter')) {

                switch(tipoRetorno)
                {
                    case "cadena":	
                    	return setSimbolos(parseFloat(Valorizq.Valor / Valorder.Valor), "doble");
                	case "entero":	
                    	return setSimbolos(parseFloat(Valorizq.Valor / Valorder.Valor), "doble");
					case "doble":	
                    	return setSimbolos(parseFloat(Valorizq.Valor / Valorder.Valor), tipoRetorno);	
                }
                }
                break;
			case "^":
                if(Valorder.Tipo != "booleano" && Valorizq.Tipo != "booleano" && Valorder.Tipo != "cadena" && Valorizq.Tipo != "cadena" && Valorizq.Tipo != 'caracter' && Valorder.Tipo != 'caracter') {

                switch(tipoRetorno)
                {
                	case "entero":	
                    	return setSimbolos(Number(Valorizq.Valor ** Valorder.Valor), tipoRetorno);
					case "doble":	
                    	
                        return setSimbolos(parseFloat(Valorizq.Valor ** Valorder.Valor), tipoRetorno);	
                }
            }
                break;	
            case "%":
                if(Valorder.Tipo != "booleano" && Valorizq.Tipo != "booleano" && Valorder.Tipo != "cadena" && Valorizq.Tipo != "cadena" && Valorizq.Tipo != 'caracter' && Valorder.Tipo != 'caracter') {

                switch(tipoRetorno)
                {
                	case "entero":
            			return setSimbolos(Valorizq.Valor % Valorder.Valor, tipoRetorno);
					case "doble":
            			return setSimbolos(Number(Valorizq.Valor % Valorder.Valor), "entero");		
                }
                }
                break;
            case "not":
                switch(tipoRetorno)
                {
                	case "entero":
            			return setSimbolos(!Valorizq.Valor, tipoRetorno);
					case "doble":
            			return setSimbolos(!Valorizq.Valor, tipoRetorno);	
                    case "booleano":
            			return setSimbolos(!Valorizq.Valor, tipoRetorno);
                }
                break;
            case "and":
                switch(tipoRetorno)
                {
                	case "booleano":
            			return setSimbolos(Valorizq.Valor && Valorder.Valor, tipoRetorno);
                }
                break;
            case "or":
                switch(tipoRetorno)
                {
                	case "booleano":
                		return setSimbolos(Valorizq.Valor || Valorder.Valor, tipoRetorno);
                }
                break;
            case ">":
                if(Valorder.Tipo != "booleano" && Valorizq.Tipo != "booleano" && (Valorizq.Tipo != 'caracter' || Valorder.Tipo != 'cadena') && (Valorizq.Tipo != 'cadena' || Valorder.Tipo != 'caracter')) {
                    
                switch(tipoRetorno)
                {
                    
                	case "cadena":
                    case "caracter":
                	case "entero":
					case "doble":
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor > Valorder.Valor, "booleano");
                }
                }
                switch(tipoRetorno)
                {
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor > Valorder.Valor, "booleano");
                }
                break;
            case "<":
                if(Valorder.Tipo != "booleano" && Valorizq.Tipo != "booleano" && (Valorizq.Tipo != 'caracter' || Valorder.Tipo != 'cadena') && (Valorizq.Tipo != 'cadena' || Valorder.Tipo != 'caracter')) {
                    
                switch(tipoRetorno)
                {
                    
                	case "cadena":
                    case "caracter":
                	case "entero":
					case "doble":
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor < Valorder.Valor, "booleano");
                }
                }
                switch(tipoRetorno)
                {
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor < Valorder.Valor, "booleano");
                }
                break;
            case ">=":
                if(Valorder.Tipo != "booleano" && Valorizq.Tipo != "booleano" && (Valorizq.Tipo != 'caracter' || Valorder.Tipo != 'cadena') && (Valorizq.Tipo != 'cadena' || Valorder.Tipo != 'caracter')) {
                    
                switch(tipoRetorno)
                {
                    
                	case "cadena":
                    case "caracter":
                	case "entero":
					case "doble":
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor >= Valorder.Valor, "booleano");
                }
                }
                switch(tipoRetorno)
                {
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor >= Valorder.Valor, "booleano");
                }
                break;
            case "<=":
                if(Valorder.Tipo != "booleano" && Valorizq.Tipo != "booleano" && (Valorizq.Tipo != 'caracter' || Valorder.Tipo != 'cadena') && (Valorizq.Tipo != 'cadena' || Valorder.Tipo != 'caracter')) {
                    
                switch(tipoRetorno)
                {
                    
                	case "cadena":
                    case "caracter":
                	case "entero":
					case "doble":
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor <= Valorder.Valor, "booleano");
                }
                }
                switch(tipoRetorno)
                {
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor <= Valorder.Valor, "booleano");
                }
                break;
            case "==":
                if(Valorder.Tipo != "booleano" && Valorizq.Tipo != "booleano" && (Valorizq.Tipo != 'caracter' || Valorder.Tipo != 'cadena') && (Valorizq.Tipo != 'cadena' || Valorder.Tipo != 'caracter')) {
                
                switch(tipoRetorno)
                {
                    
                	case "cadena":
                    case "caracter":
                	case "entero":
					case "doble":
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor == Valorder.Valor, "booleano");
                }
                }
                switch(tipoRetorno)
                {
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor == Valorder.Valor, "booleano");
                }
                break;
            case "!=":
                if(Valorder.Tipo != "booleano" && Valorizq.Tipo != "booleano" && (Valorizq.Tipo != 'caracter' || Valorder.Tipo != 'cadena') && (Valorizq.Tipo != 'cadena' || Valorder.Tipo != 'caracter')) {
                    
                switch(tipoRetorno)
                {
                    
                	case "cadena":
                    case "caracter":
                	case "entero":
					case "doble":
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor != Valorder.Valor, "booleano");
                }
                }
                switch(tipoRetorno)
                {
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor != Valorder.Valor, "booleano");
                }
                break;
        }
        console.log("Semantico","Error cerca del caracter : '"+ ( Valorizq ? Valorizq.Tipo : "" ) + " y " + ( Valorder ? Valorder.Tipo : "" ) +"'");
        return setSimbolos("@error@", "error");
    }
	/*-----------------------------------------------------------------------------------------------*/
    //print
    const print=function(TipoInstruccion,Operacion)
    {
        return {
            TipoInstruccion:TipoInstruccion,
            Operacion:Operacion
        }
    }
  	//Declaracion de variable
  	const Declaracion = function(id, tipo, expresion)
    {
    	return {
      		Id:id,
        	Tipo: tipo,
        	Expresion: expresion,
        	TipoInstruccion:"declaracion"
      }
    }
    
    function EjecutarDeclaracion(declaracion,ent) 
	{
      	// validar si existe la variable
      	if (ent.tablaSimbolos.has(declaracion.Id))
      	{
            console.log("La variable ",declaracion.Id," ya ha sido declarada en este ambito");
      		return;
      	}
    		// evaluar el resultado de la expresión 
		var valor ;	
      	if (declaracion && declaracion.Expresion)
      	{
        	valor = Evaluar(declaracion.Expresion, ent);
            if(valor.Tipo != declaracion.Tipo){
                console.log("Semantico","tipos de datos incompatibles : '"+ declaracion.Tipo + " y " + valor.Tipo +"'");
                return
            }
    	}
      	else
        {
            switch(declaracion.Tipo)
            {
                case "entero":
                    valor=setSimbolos(0,"entero");
                    break;
                case "doble":
                    valor=setSimbolos(0.0,"doble");
                    break;    
                case "cadena":
                    valor=setSimbolos("","cadena");
                    break;
                case "caracter":
                    valor=setSimbolos('0',"caracter");
                    break;    
                case "booleano":
                    valor=setSimbolos(true,"booleano");
                    break;
            }
        }
      	// crear objeto a insertar
      	ent.tablaSimbolos.set(declaracion.Id, valor);
    }
		// objeto que almacena los datos para hacer una asignacion 
  	const Asignar = function(id, expresion)
    {
    	return {
      		Id:id,
        	Expresion: expresion,
        	TipoInstruccion: "asignacion"
      	}
    }
    
    function EjecutarAsignar (asignar,ent) 
	{
      //Evaluar la expresion
      	var valor = Evaluar(asignar.Expresion,ent);
        // validar si existe la variable
      	temp=ent;
      	while(temp!=null)
        {
            if (temp.tablaSimbolos.has(asignar.Id))
            {
                // evaluar el resultado de la expresión 
                var simbolotabla = temp.tablaSimbolos.get(asignar.Id);	
              	
                // comparar los tipos
                if (simbolotabla.Tipo === valor.Tipo)
                {
                	// reasignar el valor
                    temp.tablaSimbolos.set(asignar.Id, valor);
                    return
                }
                else
                {
                    console.log("Semantico","tipos de datos incompatibles : '"+ simbolotabla.Tipo + " y " + valor.Tipo +"'");
                    return
                }
            }
            temp=temp.anterior;
        }
        console.log("No se encontro la variable ",asignar.Id);
    }
    //objeto que guarda los datos del incremento
    const Incremento = function(id)
    {
    	return {
      		Id:id,
        	TipoInstruccion: "incremento"
      	}
    }
    function EjecutarIncremento(asignar,ent) {
        // validar si existe la variable
      	temp=ent;
      	while(temp!=null)
        {
            if (temp.tablaSimbolos.has(asignar.Id))
            {
              	// reasignar el valor
                  var simbolotabla = temp.tablaSimbolos.get(asignar.Id);
                  var numero = simbolotabla.Valor +1;
                 temp.tablaSimbolos.set(asignar.Id, setSimbolos(numero, "entero"));
                    return
            }
            temp=temp.anterior;
        }
        console.log("No se encontro la variable ",asignar.Id);
    }
    //objeto que guarda los datos del decremento
    const Decremento = function(id)
    {
    	return {
      		Id:id,
        	TipoInstruccion: "decremento"
      	}
    }
    function EjecutarDecremento(asignar,ent) {
        // validar si existe la variable
      	temp=ent;
      	while(temp!=null)
        {
            if (temp.tablaSimbolos.has(asignar.Id))
            {
              	// reasignar el valor
                  var simbolotabla = temp.tablaSimbolos.get(asignar.Id);
                  var numero = simbolotabla.Valor - 1;
                 temp.tablaSimbolos.set(asignar.Id, setSimbolos(numero, "entero"));
                    return
            }
            temp=temp.anterior;
        }
        console.log("No se encontro la variable ",asignar.Id);
    }
	//insBreak
  	const insBreak = function()
    {
      	return {
          TipoInstruccion:"insBreak"
        }
    }
	
    const Retorno = function(Expresion)
    {
        return {
            Expresion:Expresion,
        	TipoInstruccion: "retorno"
        }
    }
    // Retorna un objeto con los datos de la condicional if 
	const condIF=function(Condicion,BloqueIF,BloqueElse)
    {
          return {
            Condicion:Condicion,
            BloqueIF:BloqueIF,
            BloqueElse:BloqueElse,
            TipoInstruccion:"if"
          }
    }
    function EjecutarIF (si,ent)
    {
    	var res = Evaluar(si.Condicion, ent);
        if(res.Tipo=="booleano")
        {
        	if(res.Valor)
          	{
      	        var nuevoIF=Entorno(ent);
            	return EjecutarBloque(si.BloqueIF, nuevoIF);
          	}
          	else if(si.BloqueElse!=null)
          	{
      	        var nuevoELSE=Entorno(ent);
            	return EjecutarBloque(si.BloqueElse, nuevoELSE);
        	}
    	}
        else
        {
            console.log("Se esperaba una condicion dentro del Si");
        }
    }
    //Objeto donde se guardaran los datos de los casos
    const Caso = function(Expresion,Bloque)
    {
        return {
            Expresion:Expresion,
            Bloque:Bloque
        }
    }
    
    const Seleccionar = function(Expresion, ListCase, BloqueSwitch)
    {
        return  {
            Expresion: Expresion,
            ListCase: ListCase,
            BloqueSwitch: BloqueSwitch,
            TipoInstruccion: "seleccionar"
        }
    }
	
  	function EjecutarSeleccionar(seleccionar, ent)
	{  
        pilaCiclos.push("seleccionar");
		var ejecutado = false;  
      	var nuevo = Entorno(ent);
        for(var elemento of seleccionar.ListCase)
        {
            var condicion=Evaluar(setOperacion(seleccionar.Expresion,elemento.Expresion,"=="), ent)
            if(condicion.Tipo=="booleano")
            {
              	if(condicion.Valor || ejecutado)
              	{
                	ejecutado=true;
                	var res = EjecutarBloque(elemento.Bloque, nuevo)
                	if(res && res.TipoInstruccion=="insBreak")
                	{
                        pilaCiclos.pop();
                  		return
                	}
                    else if (res)
                    {
                        pilaCiclos.pop();
                        return res
                    }
              	}
            }
          	else
            {
                pilaCiclos.pop();
                return
            }
        }
        if(seleccionar.BloqueSwitch && !ejecutado)
        {
            EjecutarBloque(seleccionar.BloqueSwitch, nuevo)
        }
        pilaCiclos.pop();
        return
    }
	//objeto donde se agruparan los datos del wihle
	const condWHILE = function(Condicion, Bloque)
    {
        return {
            Condicion: Condicion,
            Bloque: Bloque,
            TipoInstruccion:"while"
        }
    }
  
  	function EjecutarWHILE(mientras,ent)
	{
        pilaCiclos.push("ciclo");        
      	
        while(true)
        {
            nuevo=Entorno(ent);
        	var resultadoCondicion = Evaluar(mientras.Condicion, nuevo)
            if(resultadoCondicion.Tipo=="booleano")
            {
            	if(resultadoCondicion.Valor)
            	{
                	var res=EjecutarBloque(mientras.Bloque, nuevo);
                	if(res && res.TipoInstruccion=="insBreak")
                	{
                		break;
                	}
                    else if (res)
                    {
                        pilaCiclos.pop();
                        return res
                    }
            	}
            	else
            	{
                	break;
              	}
            }
            else
            {
                console.log("Semantico","Error, el while esperaba una condicion que retorne un booleano, no un => '"+ resultadoCondicion.Tipo );
                pilaCiclos.pop();
                return
            }
		}
        pilaCiclos.pop();
        return
	}
    	//objeto donde se agruparan los datos del do wihle
	const condDOWHILE = function(Condicion, Bloque)
    {
        return {
            Condicion: Condicion,
            Bloque: Bloque,
            TipoInstruccion:"dowhile"
        }
    }
    function EjecutarDOWHILE(mientras,ent)
	{
        pilaCiclos.push("ciclo");        
      	
        while(true)
        {
            nuevo=Entorno(ent);
        	var resultadoCondicion = Evaluar(mientras.Condicion, nuevo)
            if(resultadoCondicion.Tipo=="booleano")
            {
            	
                	var res=EjecutarBloque(mientras.Bloque, nuevo);
                	if(res && res.TipoInstruccion=="insBreak")
                	{
                		break;
                	}
                    else if (res)
                    {
                        pilaCiclos.pop();
                        return res
                    }
                resultadoCondicion = Evaluar(mientras.Condicion, nuevo)    
            	if(!resultadoCondicion.Valor)
            	{
                	break;
              	}
            }
            else
            {
                console.log("Semantico","Error, el while esperaba una condicion que retorne un booleano, no un => '"+ resultadoCondicion.Tipo );
                pilaCiclos.pop();
                return
            }
		}
        pilaCiclos.pop();
        return
	}
	const condFOR = function(ExpDesde, ExpHasta, ExpPaso, Bloque)
    {
        return {
            ExpDesde: ExpDesde,
            ExpHasta: ExpHasta,
            ExpPaso: ExpPaso,
            Bloque: Bloque,
            TipoInstruccion:"for"
        }
    }
  
	function EjecutarFOR(insfor, ent)
	{
        pilaCiclos.push("ciclo"); 
      	var nuevo=Entorno(ent);
    	//controlador de la condicion
    	if( insfor.ExpDesde.TipoInstruccion == "declaracion" )
    	{
      		EjecutarDeclaracion(insfor.ExpDesde, nuevo);
    	}
    	else
    	{
        	EjecutarAsignar(insfor.ExpDesde, nuevo);
    	}
        var hasta = Evaluar(insfor.ExpHasta, nuevo);
    	var Simbolo=setSimbolos(insfor.ExpDesde.Id,"identificador")
        if( !(hasta.Tipo=="booleano") )
        {
            pilaCiclos.pop();
            console.log("Se esperaban valores numericos en el for");
            return;
        }
    	while(true)
    	{
            
            hasta = Evaluar(insfor.ExpHasta, nuevo);
        	var inicio=Evaluar(Simbolo, nuevo)
            if( inicio.Tipo != "entero" )
            {
                pilaCiclos.pop();
                console.log("Semantico","Error, el for esperaba un entero no un => '"+ inicio.Tipo );
                return;
            }
        	if(hasta.Valor == true)
        	{
                    var res=EjecutarBloque(insfor.Bloque, nuevo);
                    if(res && res.TipoInstruccion=="insBreak")
                    {
                        break;
                    }
                    else if (res)
                    {
                        pilaCiclos.pop();
                        return res
                    }
                 
        	}
        	else
        	{
            	break;
        	}
        	if( insfor.ExpPaso.TipoInstruccion == "incremento")
            {
                EjecutarIncremento(insfor.ExpPaso, nuevo);
            } else if( insfor.ExpPaso.TipoInstruccion == "decremento")
            {
                EjecutarDecremento(insfor.ExpPaso, nuevo);
            }
            else
            {
                EjecutarAsignar(insfor.ExpPaso, nuevo);
            }
            nuevo=Entorno(ent);
        }
        pilaCiclos.pop();
        return;
	}
    //Funcion
    const Funcion=function(Id, Parametros, Tipo, Bloque)
    {
        return{
            Id: Id,
            Parametros: Parametros,
            Bloque: Bloque,
            Tipo: Tipo,
            TipoInstruccion: "funcion"
        }
    }
    function EjecutarFuncion(elemento,ent)
    {
        if (ent.tablaSimbolos.has(elemento.Id))
      	{
            console.log("Error Semantico","el nombre de la funcion: '"+ elemento.Id +" ya existe");
      		return;
      	}
        ent.tablaSimbolos.set(elemento.Id, elemento);
    }
    //Llamada
    const Llamada=function(Id,Params)
    {
        return {
            Id: Id,
            Params: Params,
            TipoInstruccion: "llamada"
        }
    }
    function EjecutarLlamada(Llamada,ent)
    {
        var Resueltos = [];
        for(var param of Llamada.Params)
        {
            var valor = Evaluar(param,ent);
            Resueltos.push(valor);
        }
        var temp = ent;
        var simboloFuncion = null;
      	while(temp!=null)
        {
            if (temp.tablaSimbolos.has(Llamada.Id))
            {
                // evaluar el resultado de la expresión 
                simboloFuncion = temp.tablaSimbolos.get(Llamada.Id);	
                break;
            }
            temp=temp.anterior;
        }
        if(!simboloFuncion){
            console.log("Error Semantico","No se encontró la funcion: "+Llamada.Id );
            return setSimbolos("@error@","error");
        } 
        pilaFunciones.push(Llamada.Id);
        var nuevo=Entorno(EntornoGlobal)
        var index=0;
        for(var crear of simboloFuncion.Parametros)
        {
            crear.Expresion=Resueltos[index];
            EjecutarDeclaracion(crear,nuevo);
            index++;
        }
        var retorno=setSimbolos("@error@","error");
        var res = EjecutarBloque(simboloFuncion.Bloque, nuevo)
        if(res)
        {
            if(res.Tipo=="void" )
            {
                if(simboloFuncion.Tipo!="void")
                {
                    console.log("No se esperaba un retorno");
                    retorno=setSimbolos("@error@","error");
                }
                else
                {
                    retorno=setSimbolos("@vacio@","vacio")
                }
            }
            else
            {
                var exp=Evaluar(res,nuevo);
                if(exp.Tipo!=simboloFuncion.Tipo)
                {
                    console.log("El tipo del retorno no coincide");
                    retorno=setSimbolos("@error@","error");
                }
                else
                {
                    retorno=exp;
                }
            }
        }
        else
        {
            if(simboloFuncion.Tipo!="void")
            {
                console.log("Se esperaba un retorno");
                retorno=setSimbolos("@error@","error");
            }
            else
            {
                retorno=setSimbolos("@vacio@","vacio")
            }
        }
        pilaFunciones.pop();
        return retorno;
    }
    //Llamada EXEC
    const LlamadaEXEC=function(Id,Params)
    {
        return {
            Id: Id,
            Params: Params,
            TipoInstruccion: "llamadaexec"
        }
    }
    function EjecutarLlamadaEXEC(Llamada,ent)
    {   
        if(principal==0){
        var Resueltos = [];
        for(var param of Llamada.Params)
        {
            var valor = Evaluar(param,ent);
            Resueltos.push(valor);
        }
        var temp = ent;
        var simboloFuncion = null;
      	while(temp!=null)
        {
            if (temp.tablaSimbolos.has(Llamada.Id))
            {
                // evaluar el resultado de la expresión 
                simboloFuncion = temp.tablaSimbolos.get(Llamada.Id);	
                break;
            }
            temp=temp.anterior;
        }
        if(!simboloFuncion){
            console.log("Error Semantico","No se encontró la funcion: "+Llamada.Id );
            return setSimbolos("@error@","error");
        } 
        pilaFunciones.push(Llamada.Id);
        var nuevo=Entorno(EntornoGlobal)
        var index=0;
        for(var crear of simboloFuncion.Parametros)
        {
            crear.Expresion=Resueltos[index];
            EjecutarDeclaracion(crear,nuevo);
            index++;
        }
        var retorno=setSimbolos("@error@","error");
        var res = EjecutarBloque(simboloFuncion.Bloque, nuevo)
        if(res)
        {
            if(res.Tipo=="void" )
            {
                if(simboloFuncion.Tipo!="void")
                {
                    console.log("No se esperaba un retorno");
                    retorno=setSimbolos("@error@","error");
                }
                else
                {
                    retorno=setSimbolos("@vacio@","vacio")
                }
            }
            else
            {
                var exp=Evaluar(res,nuevo);
                if(exp.Tipo!=simboloFuncion.Tipo)
                {
                    console.log("El tipo del retorno no coincide");
                    retorno=setSimbolos("@error@","error");
                }
                else
                {
                    retorno=exp;
                }
            }
        }
        else
        {
            if(simboloFuncion.Tipo!="void")
            {
                console.log("Se esperaba un retorno");
                retorno=setSimbolos("@error@","error");
            }
            else
            {
                retorno=setSimbolos("@vacio@","vacio")
            }
        }
        pilaFunciones.pop();
        principal = principal+1;
        return retorno;
        }else{
            console.log("Solo se puede aplicar la funcion EXEC a una funcion, no a mas");
        }
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 69; 
break;
case 1:// se ignoran espacios en blanco
break;
case 2:console.error('Este es un comentario simple');
break;
case 3:console.error('Este es un comentario multiple');
break;
case 4:return 7;
break;
case 5:return 'LOWER';
break;
case 6:return 'UPPER';
break;
case 7:return 'LENGTH';
break;
case 8:return 'TRUNCATE';
break;
case 9:return 'ROUND';
break;
case 10:return 'TYPEOF';
break;
case 11:return 'CHARARRAY';
break;
case 12:return 26;
break;
case 13:return 'NEW';
break;
case 14:return 47;
break;
case 15:return 51;
break;
case 16:return 48;
break;
case 17:return 50;
break;
case 18:return 49;
break;
case 19:return 'SALTOLINEA';
break;
case 20:return 'BARINVERSA';
break;
case 21:return 'COMILLASIM';
break;
case 22:return 'COMILLADOB';
break;
case 23:return 'TABULAR';
break;
case 24:return 34;
break;
case 25:return 35;
break;
case 26:return 44;
break;
case 27:return 45;
break;
case 28:return 32;
break;
case 29:return 36;
break;
case 30:return 42;
break;
case 31:return 40;
break;
case 32:return 24;
break;
case 33:return 'CONTINUE';
break;
case 34:return 'RETURN';
break;
case 35:return 29;
break;
case 36:return 43;
break;
case 37:return 31;
break;
case 38:return 11;
break;
case 39:return 37;
break;
case 40:return 39;
break;
case 41:return 8;
break;
case 42:return 10;
break;
case 43:return 'CORIZQ';
break;
case 44:return 'CORDER';
break;
case 45:return 'O_MAS';
break;
case 46:return 'O_MENOS';
break;
case 47:return 'O_POR';
break;
case 48:return 'O_DIVIDIDO';
break;
case 49:return 22
break;
case 50:return 23
break;
case 51:return 52;
break;
case 52:return 53;
break;
case 53:return 54;
break;
case 54:return 55;
break;
case 55:return 56;
break;
case 56:return 57;
break;
case 57:return 62;
break;
case 58:return 63;
break;
case 59:return 58;
break;
case 60:return 59;
break;
case 61:return 60;
break;
case 62:return 61;
break;
case 63:return 65;
break;
case 64:return 64
break;
case 65:return 66;
break;
case 66:return 67;
break;
case 67:return 68;
break;
case 68:return 46;
break;
case 69:return 'OPTERNARIO'
break;
case 70:return 'CONCAT';
break;
case 71: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70; 
break;
case 72:return 71;
break;
case 73:return 72;
break;
case 74:return 21;
break;
case 75:return 5;
break;
case 76: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:"((\\")|[^\n\"])*")/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\\\n)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\")/i,/^(?:\\\t)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:&)/i,/^(?:'((\\')|[^\n\'])')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}