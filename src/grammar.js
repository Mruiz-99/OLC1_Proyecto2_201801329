/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,10],$V3=[1,14],$V4=[1,13],$V5=[1,12],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[5,7,16,17,20,21,23,25,28,31,32,33,34,35],$Vc=[1,29],$Vd=[1,36],$Ve=[1,28],$Vf=[1,27],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[1,58],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,52],$Vx=[1,53],$Vy=[1,54],$Vz=[1,55],$VA=[1,56],$VB=[1,57],$VC=[10,11,18,24,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],$VD=[10,11,18,24,48,50],$VE=[10,11,18,24,36,37,42,43,44,45,46,47,48,49,50],$VF=[10,11,18,24,36,37,38,39,41,42,43,44,45,46,47,48,49,50],$VG=[10,11,18,24,42,43,44,45,46,47,48,49,50],$VH=[5,7,16,17,20,21,23,25,27,28,31,32,33,34,35],$VI=[1,97],$VJ=[20,21,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"PRINT":7,"PARIZQ":8,"expresion":9,"PARDER":10,"PTCOMA":11,"DECLARACION":12,"ASIGNACION":13,"condIF":14,"switchCASE":15,"BREAK":16,"SWITCH":17,"LLAVIZQ":18,"ListCase":19,"LLAVDER":20,"DEFAULT":21,"BLOQUECASE":22,"CASE":23,"DOSPTS":24,"IF":25,"BLOQUE":26,"ELSE":27,"IDENTIFICADOR":28,"IGUAL":29,"TIPO":30,"RENTERO":31,"Rbooleano":32,"RCADENA":33,"RCARACTER":34,"RDOUBLE":35,"MAS":36,"MENOS":37,"POR":38,"DIVIDIDO":39,"POTENCIA":40,"MOD":41,"DOBLEIGUAL":42,"NOIGUAL":43,"MENQUE":44,"MAYQUE":45,"MENIGQUE":46,"MAYIGQUE":47,"AND":48,"NOT":49,"OR":50,"TRUE":51,"FALSE":52,"CADENA":53,"CARACTER":54,"DECIMAL":55,"ENTERO":56,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PRINT",8:"PARIZQ",10:"PARDER",11:"PTCOMA",16:"BREAK",17:"SWITCH",18:"LLAVIZQ",20:"LLAVDER",21:"DEFAULT",23:"CASE",24:"DOSPTS",25:"IF",27:"ELSE",28:"IDENTIFICADOR",29:"IGUAL",31:"RENTERO",32:"Rbooleano",33:"RCADENA",34:"RCARACTER",35:"RDOUBLE",36:"MAS",37:"MENOS",38:"POR",39:"DIVIDIDO",40:"POTENCIA",41:"MOD",42:"DOBLEIGUAL",43:"NOIGUAL",44:"MENQUE",45:"MAYQUE",46:"MENIGQUE",47:"MAYIGQUE",48:"AND",49:"NOT",50:"OR",51:"TRUE",52:"FALSE",53:"CADENA",54:"CARACTER",55:"DECIMAL",56:"ENTERO"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,5],[6,1],[6,1],[6,1],[6,1],[6,2],[15,5],[15,7],[19,4],[19,3],[22,1],[22,2],[14,3],[14,5],[14,5],[26,2],[26,3],[13,4],[12,5],[12,3],[30,1],[30,1],[30,1],[30,1],[30,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(JSON.stringify($$[$0-1],null,2)); EjecutarBloque($$[$0-1],EntornoGlobal)  
break;
case 2:
 this.$=$$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$=[]; this.$.push($$[$0]); 
break;
case 4:
console.log("Sintactico","Error en : '"+yytext+"'",this._$.first_line,this._$.first_column)
break;
case 5:
 this.$ = print("print",$$[$0-2]); 
break;
case 6: case 7: case 8: case 9:
 this.$ = $$[$0] 
break;
case 10:
 this.$ = insBreak();
break;
case 11:
 this.$ = Seleccionar($$[$0-3], $$[$0-1]); 
break;
case 12:
 this.$ = Seleccionar($$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 13:
 this.$ = $$[$0-3]; this.$.push(Caso($$[$0-1], $$[$0])); 
break;
case 14:
 this.$ = []; this.$.push(Caso($$[$0-1], $$[$0])); 
break;
case 15: case 20:
 this.$ = []; 
break;
case 16:
 this.$ = $$[$0]; 
break;
case 17:
 this.$ = condIF($$[$0-1], $$[$0], null); 
break;
case 18:
 this.$ = condIF($$[$0-3], $$[$0-2], Array ($$[$0]) );
break;
case 19:
 this.$ = condIF($$[$0-3], $$[$0-2], $$[$0] ); 
break;
case 21:
 this.$ = $$[$0-1]; 
break;
case 22:
 this.$ = Asignar($$[$0-3],$$[$0-1]); 
break;
case 23:
 this.$ = Declaracion($$[$0-3],$$[$0-4],$$[$0-1]); 
break;
case 24:
 this.$ = Declaracion($$[$0-1],$$[$0-2],null); 
break;
case 25:
 this.$ = "entero" 
break;
case 26:
 this.$ = "booleano" 
break;
case 27:
 this.$ = "cadena" 
break;
case 28:
 this.$ = "caracter" 
break;
case 29:
 this.$ = "doble" 
break;
case 30:
 this.$ = setOperacion($$[$0-2],$$[$0],"+");
break;
case 31:
 this.$ = setOperacion($$[$0-2],$$[$0],"-");
break;
case 32:
 this.$ = setOperacion($$[$0-2],$$[$0],"*");
break;
case 33:
 this.$ = setOperacion($$[$0-2],$$[$0],"/");
break;
case 34:
 this.$ = setOperacion($$[$0-2],$$[$0],"^");
break;
case 35:
 this.$ = setOperacion($$[$0-2],$$[$0],"%");
break;
case 36:
 this.$ = setOperacion($$[$0-2],$$[$0],"==");
break;
case 37:
 this.$ = setOperacion($$[$0-2],$$[$0],"!=");
break;
case 38:
 this.$ = setOperacion($$[$0-2],$$[$0],"<");
break;
case 39:
 this.$ = setOperacion($$[$0-2],$$[$0],">");
break;
case 40:
 this.$ = setOperacion($$[$0-2],$$[$0],"<=");
break;
case 41:
 this.$ = setOperacion($$[$0-2],$$[$0],">=");
break;
case 42:
 this.$ = setOperacion($$[$0-2],$$[$0],"and");
break;
case 43:
 this.$ = setOperacion($$[$0-2],$$[$0],"not");
break;
case 44:
 this.$ = setOperacion($$[$0-2],$$[$0],"or");
break;
case 45:
 this.$ = setOperacionUnario($$[$0],"not");
break;
case 46:
 this.$ = setOperacionUnario($$[$0],"umenos");
break;
case 47:
 this.$ = $$[$0-1]
break;
case 48:
 this.$ = setSimbolos(true,"booleano");
break;
case 49:
 this.$ = setSimbolos(false,"booleano");
break;
case 50:
 this.$ = setSimbolos($$[$0],"cadena");
break;
case 51:
 this.$ = setSimbolos($$[$0],"caracter");
break;
case 52:
 this.$ = setSimbolos(parseFloat($$[$0]),"doble");
break;
case 53:
 this.$ = setSimbolos($$[$0],"entero");
break;
case 54:
 this.$ = setSimbolos($$[$0],"identificador");
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,12:6,13:7,14:8,15:9,16:$V2,17:$V3,25:$V4,28:$V5,30:11,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va},{1:[3]},{5:[1,20],6:21,7:$V1,12:6,13:7,14:8,15:9,16:$V2,17:$V3,25:$V4,28:$V5,30:11,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va},o($Vb,[2,3]),o($Vb,[2,4]),{8:[1,22]},o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),{11:[1,23]},{28:[1,24]},{29:[1,25]},{8:$Vc,9:26,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:37,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{28:[2,25]},{28:[2,26]},{28:[2,27]},{28:[2,28]},{28:[2,29]},{1:[2,1]},o($Vb,[2,2]),{8:$Vc,9:38,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},o($Vb,[2,10]),{11:[1,40],29:[1,39]},{8:$Vc,9:41,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{18:$Vm,26:42,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB},{8:$Vc,9:59,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:60,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:61,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},o($VC,[2,48]),o($VC,[2,49]),o($VC,[2,50]),o($VC,[2,51]),o($VC,[2,52]),o($VC,[2,53]),o($VC,[2,54]),{18:[1,62],36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB},{10:[1,63],36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB},{8:$Vc,9:64,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},o($Vb,[2,24]),{11:[1,65],36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB},o($Vb,[2,17],{27:[1,66]}),{8:$Vc,9:67,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:68,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:69,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:70,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:71,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:72,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:73,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:74,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:75,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:76,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:77,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:78,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:79,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:80,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{8:$Vc,9:81,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{2:$V0,4:83,6:3,7:$V1,12:6,13:7,14:8,15:9,16:$V2,17:$V3,20:[1,82],25:$V4,28:$V5,30:11,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va},o($VD,[2,45],{36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,49:$VA}),o($VC,[2,46]),{10:[1,84],36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB},{19:85,23:[1,86]},{11:[1,87]},{11:[1,88],36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB},o($Vb,[2,22]),{14:89,18:$Vm,25:$V4,26:90},o($VE,[2,30],{38:$Vp,39:$Vq,40:$Vr,41:$Vs}),o($VE,[2,31],{38:$Vp,39:$Vq,40:$Vr,41:$Vs}),o($VF,[2,32],{40:$Vr}),o($VF,[2,33],{40:$Vr}),o($VF,[2,34]),o($VF,[2,35],{40:$Vr}),o($VG,[2,36],{36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs}),o($VG,[2,37],{36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs}),o($VG,[2,38],{36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs}),o($VG,[2,39],{36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs}),o($VG,[2,40],{36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs}),o($VG,[2,41],{36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs}),o($VD,[2,42],{36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,49:$VA}),o($VD,[2,43],{36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,49:$VA}),o([10,11,18,24,50],[2,44],{36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA}),o($VH,[2,20]),{6:21,7:$V1,12:6,13:7,14:8,15:9,16:$V2,17:$V3,20:[1,91],25:$V4,28:$V5,30:11,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va},o($VC,[2,47]),{20:[1,92],21:[1,93],23:[1,94]},{8:$Vc,9:95,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},o($Vb,[2,5]),o($Vb,[2,23]),o($Vb,[2,18]),o($Vb,[2,19]),o($VH,[2,21]),o($Vb,[2,11]),{22:96,24:$VI},{8:$Vc,9:98,28:$Vd,37:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl},{22:99,24:$VI,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB},{20:[1,100]},o($VJ,[2,15],{6:3,12:6,13:7,14:8,15:9,30:11,4:101,2:$V0,7:$V1,16:$V2,17:$V3,25:$V4,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va}),{22:102,24:$VI,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB},o($VJ,[2,14]),o($Vb,[2,12]),o($VJ,[2,16],{12:6,13:7,14:8,15:9,30:11,6:21,7:$V1,16:$V2,17:$V3,25:$V4,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va}),o($VJ,[2,13])],
defaultActions: {15:[2,25],16:[2,26],17:[2,27],18:[2,28],19:[2,29],20:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var pilaCiclos = [];
    var pilaFunciones = [];
  	// entorno
  	const Entorno = function(anterior)
    {
    	return {
        	tablaSimbolos:new Map(),
          	anterior:anterior
        }
    }
  	var EntornoGlobal = Entorno(null)
  	//Ejecuciones
    function EjecutarBloque(instrucciones, ent)
	{
        var retorno=null;
        for(var elemento of instrucciones)
        {
        	switch(elemento.TipoInstruccion)
          	{
            	case "print":
                    var res=Evaluar(elemento.Operacion, ent);
                    console.log(res.Valor);
                    break;
                case "declaracion":
                    retorno = EjecutarDeclaracion(elemento, ent);
                    break;
                case "asignacion":
                    retorno = EjecutarAsignar(elemento, ent);
                    break;
                case "hacer":
                    retorno = EjecutarHacer(elemento, ent);
                    break;
                case "if":
                    retorno = EjecutarIF(elemento, ent);
                    break;
                case "mientras":
                    retorno = EjecutarMientras(elemento, ent);
                    break;
                case "desde":
                    retorno = EjecutarDesde(elemento, ent);
                    break;
                case "seleccionar":
                    retorno = EjecutarSeleccionar(elemento, ent);
                    break;
                case "funcion":
                    retorno = EjecutarFuncion(elemento,EntornoGlobal);
                    break;
                case "llamada":
                    EjecutarLlamada(elemento,ent);
                    retorno = null;
                    break;
                case "retorno":
                    if (pilaFunciones.length>0)
                    {
                        retorno = elemento.Expresion;
                    }
                    else
                    {
                        console.log("Intruccion retorno fuera de una funcion")
                    }
                    break;
                case "insBreak":
                    if (pilaCiclos.length>0)
                    {
                        return elemento;
                    }
                    else
                    {
                        console.log("Intruccion insBreak fuera de un seleccionar o un ciclo")
                    }
                    
          	}
            if(retorno)
            {
                return retorno;
            }
        }
        return null;
    }
    //Expresion
    const setSimbolos = function(Valor,Tipo)
    {
        return {
            Valor:Valor,
            Tipo:Tipo
        }
    }
    const setOperacion= function(factor_izq,factor_der,Tipo)
    {
        return {
            factor_izq:factor_izq,
            factor_der:factor_der,
            Tipo:Tipo
        }
    }
    function setOperacionUnario(Operando,Tipo)
	{
        return {
            factor_izq:Operando,
            factor_der:null,
            Tipo:Tipo
        }
    }
    function Evaluar(Operacion,ent)
    {
        var Valorizq=null;
        var Valorder=null;
      	//Simbolos
        switch(Operacion.Tipo)
        {
            case "booleano":
                return setSimbolos(Operacion.Valor,Operacion.Tipo);
            case "cadena":
                return setSimbolos(Operacion.Valor,Operacion.Tipo);
			case "caracter":
                return setSimbolos(Operacion.Valor,Operacion.Tipo);
            case "doble":
                return setSimbolos(parseFloat(Operacion.Valor),Operacion.Tipo);
			case "entero":
                return setSimbolos(Number(Operacion.Valor),Operacion.Tipo);
          	case "identificador":
                var temp=ent;
                while(temp!=null)
                {
                    if(temp.tablaSimbolos.has(Operacion.Valor))
                    {
                        var valorID = temp.tablaSimbolos.get(Operacion.Valor);
                        return setSimbolos(valorID.Valor,valorID.Tipo);
                    }
                    temp=temp.anterior;
                }
                console.log("No existe la variable " + Operacion.Valor);
                return setSimbolos("@error@","error");
            case "funcion":
                var res = EjecutarLlamada(Llamada(Operacion.Valor.Id,Operacion.Valor.Params), ent)
                return res
        }
      	//Operaciones
        Valorizq=Evaluar(Operacion.factor_izq, ent);
        if(Operacion.factor_der!=null)
        {
            Valorder=Evaluar(Operacion.factor_der, ent);
        }
      	var tipoRetorno = "error";
      	// identificar qué operaciones sí podemos realizar dependiendo del tipo
    	switch(Valorizq.Tipo)
        {
          case "cadena":
            // cadena puede sumarse con cualquier otro tipo
            if(!Valorder){
            	tipoRetorno="cadena";
            	break;
            }
            switch(Valorder.Tipo)
            {
            	case "cadena":
				case "caracter":
              	case "entero":
				case "doble":
                case "booleano":
                	tipoRetorno = "cadena";	
                	break;
            }
            break;
		case "caracter":
            // cadena puede sumarse con cualquier otro tipo
            if(!Valorder){
            	tipoRetorno="caracter";
            	break;
            }
            switch(Valorder.Tipo)
            {
            	case "cadena":
				case "caracter":
              	case "entero":
				case "doble":
                case "booleano":
                	tipoRetorno = "cadena";	
                	break;
            }
            break;	
          case "entero":
            if(!Valorder){
            	tipoRetorno="entero";
              	break;
            }
            switch(Valorder.Tipo)
            {
            	case "cadena":
                	tipoRetorno = "cadena";
                	break;
              	case "entero":
                	tipoRetorno = "entero";	
                	break;
				case "doble":
                	tipoRetorno = "doble";	
                	break;	
            }
            break;
		case "doble":
            if(!Valorder){
            	tipoRetorno="doble";
              	break;
            }
            switch(Valorder.Tipo)
            {
            	case "cadena":
                	tipoRetorno = "cadena";
                	break;
              	case "entero":
                	tipoRetorno = "entero";	
                	break;
				case "doble":
                	tipoRetorno = "doble";	
                	break;	
            }
            break;	
          case "booleano":
            if(!Valorder){
            	tipoRetorno="booleano";
              	break;
            }
            if(!Valorder){
            	break;
            }
            switch(Valorder.Tipo)
            {
            	case "booleano":
                	tipoRetorno = "booleano";
              		break;
            }
            break;
        }
      
        switch (Operacion.Tipo)
        {
            case "+":
                switch(tipoRetorno)
                {
                	case "cadena":
                    case "caracter":
                	case "entero":
            			return setSimbolos(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                		break;
					case "doble":
            			return setSimbolos(Valorizq.Valor + Valorder.Valor, tipoRetorno);
                		break;
                }
            case "-":
                switch(tipoRetorno)
                {
                	case "entero":
            			return setSimbolos(Valorizq.Valor - Valorder.Valor, tipoRetorno);
                		break;
					case "doble":
            			return setSimbolos(Valorizq.Valor - Valorder.Valor, tipoRetorno);
                		break;	
                }
            case "umenos":
                switch(tipoRetorno)
                {
                	case "entero":
            			return setSimbolos(0-Valorizq.Valor, tipoRetorno);
					case "doble":
            			return setSimbolos(0-Valorizq.Valor, tipoRetorno);	
                }
            case "*":
                switch(tipoRetorno)
                {
                	case "entero":
                    	return setSimbolos(Valorizq.Valor * Valorder.Valor, tipoRetorno);
					case "doble":
                    	return setSimbolos(Valorizq.Valor * Valorder.Valor, tipoRetorno);	
                }
            case "/":
                switch(tipoRetorno)
                {
                	case "entero":	
                    	return setSimbolos(Valorizq.Valor / Valorder.Valor, tipoRetorno);
					case "doble":	
                    	return setSimbolos(Valorizq.Valor / Valorder.Valor, tipoRetorno);	
                }
			case "^":
                switch(tipoRetorno)
                {
                	case "entero":	
                    	return setSimbolos(Valorizq.Valor ** Valorder.Valor, tipoRetorno);
					case "doble":	
                    	return setSimbolos(Valorizq.Valor ** Valorder.Valor, tipoRetorno);	
                }	
            case "%":
                switch(tipoRetorno)
                {
                	case "entero":
            			return setSimbolos(Valorizq.Valor % Valorder.Valor, tipoRetorno);
					case "doble":
            			return setSimbolos(Valorizq.Valor % Valorder.Valor, tipoRetorno);		
                }
            case "not":
                switch(tipoRetorno)
                {
                	case "entero":
            			return setSimbolos(!Valorizq.Valor, tipoRetorno);
					case "doble":
            			return setSimbolos(!Valorizq.Valor, tipoRetorno);	
                    case "booleano":
            			return setSimbolos(!Valorizq.Valor, tipoRetorno);
                }
            case "and":
                switch(tipoRetorno)
                {
                	case "booleano":
            			return setSimbolos(Valorizq.Valor && Valorder.Valor, tipoRetorno);
                }
            case "or":
                switch(tipoRetorno)
                {
                	case "booleano":
                		return setSimbolos(Valorizq.Valor || Valorder.Valor, tipoRetorno);
                }
            case ">":
                switch(tipoRetorno)
                {
                	case "cadena":
                    case "caracter":
                	case "entero":
					case "doble":
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor > Valorder.Valor, "booleano");
                }
            case "<":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "entero":
                    case "caracter":
					case "doble":
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor < Valorder.Valor, "booleano");
                }
            case ">=":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "entero":
                    case "caracter":
					case "doble":
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor >= Valorder.Valor, "booleano");
                }
            case "<=":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "entero":
                    case "caracter":
					case "doble":
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor <= Valorder.Valor, "booleano");
                }
            case "==":
                switch(tipoRetorno)
                {
                	case "cadena":
                	case "entero":
                    case "caracter":
					case "doble":
                	case "booleano":
                    	return setSimbolos(Valorizq.Valor == Valorder.Valor, "booleano");
                }
            case "!=":
                switch(tipoRetorno)
                {
                	case "cadena":
                    case "caracter":
                	case "entero":
					case "doble":
                	case "booleano":
                		return setSimbolos(Valorizq.Valor != Valorder.Valor, "booleano");
                }
        }
      	console.log(
          "Tipos incompatibles " + ( Valorizq ? Valorizq.Tipo : "" ) + 
          " y " + ( Valorder ? Valorder.Tipo : "" )); 
      	return setSimbolos("@error@", "error");
    }
	/*-----------------------------------------------------------------------------------------------*/
    //print
    const print=function(TipoInstruccion,Operacion)
    {
        return {
            TipoInstruccion:TipoInstruccion,
            Operacion:Operacion
        }
    }
  	//Declaracion de variable
  	const Declaracion = function(id, tipo, expresion)
    {
    	return {
      		Id:id,
        	Tipo: tipo,
        	Expresion: expresion,
        	TipoInstruccion:"declaracion"
      }
    }
    
    function EjecutarDeclaracion(declaracion,ent) 
	{
      	// validar si existe la variable
      	if (ent.tablaSimbolos.has(declaracion.Id))
      	{
            console.log("La variable ",declaracion.Id," ya ha sido declarada en este ambito");
      		return;
      	}
    		// evaluar el resultado de la expresión 
		var valor ;	
      	if (declaracion && declaracion.Expresion)
      	{
        	valor = Evaluar(declaracion.Expresion, ent);
            if(valor.Tipo != declaracion.Tipo){
                console.log("El tipo no coincide con la variable a declaracion");
                return
            }
    	}
      	else
        {
            switch(declaracion.Tipo)
            {
                case "entero":
                    valor=setSimbolos(0,"entero");
                    break;
                case "doble":
                    valor=setSimbolos(0.0,"doble");
                    break;    
                case "cadena":
                    valor=setSimbolos("","cadena");
                    break;
                case "caracter":
                    valor=setSimbolos('0',"caracter");
                    break;    
                case "booleano":
                    valor=setSimbolos(true,"booleano");
                    break;
            }
        }
      	// crear objeto a insertar
      	ent.tablaSimbolos.set(declaracion.Id, valor);
    }
		// asignar
  	const Asignar = function(id, expresion)
    {
    	return {
      		Id:id,
        	Expresion: expresion,
        	TipoInstruccion: "asignacion"
      	}
    }
    
    function EjecutarAsignar (asignar,ent) 
	{
      	//Evaluar la expresion
      	var valor = Evaluar(asignar.Expresion,ent);
        // validar si existe la variable
      	temp=ent;
      	while(temp!=null)
        {
            if (temp.tablaSimbolos.has(asignar.Id))
            {
                // evaluar el resultado de la expresión 
                var simbolotabla = temp.tablaSimbolos.get(asignar.Id);	
              	
                // comparar los tipos
                if (simbolotabla.Tipo === valor.Tipo)
                {
                	// reasignar el valor
                    temp.tablaSimbolos.set(asignar.Id, valor);
                    return
                }
                else
                {
                    console.log("Tipos incompatibles ",simbolotabla.Tipo," , ",valor.Tipo)
                    return
                }
            }
            temp=temp.anterior;
        }
        console.log("No se encontro la variable ",asignar.Id);
    }
	//insBreak
  	const insBreak = function()
    {
      	return {
          TipoInstruccion:"insBreak"
        }
    }
	
    const Retorno = function(Expresion)
    {
        return {
            Expresion:Expresion,
        	TipoInstruccion: "retorno"
        }
    }
    // Retorna un objeto con los datos de la condicional if 
	const condIF=function(Condicion,BloqueIF,BloqueElse)
    {
          return {
            Condicion:Condicion,
            BloqueIF:BloqueIF,
            BloqueElse:BloqueElse,
            TipoInstruccion:"if"
          }
    }
    function EjecutarIF (si,ent)
    {
    	var res = Evaluar(si.Condicion, ent);
        if(res.Tipo=="booleano")
        {
        	if(res.Valor)
          	{
      	        var nuevoIF=Entorno(ent);
            	return EjecutarBloque(si.BloqueIF, nuevoIF);
          	}
          	else if(si.BloqueElse!=null)
          	{
      	        var nuevoELSE=Entorno(ent);
            	return EjecutarBloque(si.BloqueElse, nuevoELSE);
        	}
    	}
        else
        {
            console.log("Se esperaba una condicion dentro del Si");
        }
    }
    //Casos
    const Caso = function(Expresion,Bloque)
    {
        return {
            Expresion:Expresion,
            Bloque:Bloque
        }
    }
    
    const Seleccionar = function(Expresion, ListCase, BloqueSwitch)
    {
        return  {
            Expresion: Expresion,
            ListCase: ListCase,
            BloqueSwitch: BloqueSwitch,
            TipoInstruccion: "seleccionar"
        }
    }
	
  	function EjecutarSeleccionar(seleccionar, ent)
	{  
        pilaCiclos.push("seleccionar");
		var ejecutado = false;  
      	var nuevo = Entorno(ent);
        for(var elemento of seleccionar.ListCase)
        {
            var condicion=Evaluar(setOperacion(seleccionar.Expresion,elemento.Expresion,"=="), ent)
            if(condicion.Tipo=="booleano")
            {
              	if(condicion.Valor || ejecutado)
              	{
                	ejecutado=true;
                	var res = EjecutarBloque(elemento.Bloque, nuevo)
                	if(res && res.TipoInstruccion=="insBreak")
                	{
                        pilaCiclos.pop();
                  		return
                	}
                    else if (res)
                    {
                        pilaCiclos.pop();
                        return res
                    }
              	}
            }
          	else
            {
                pilaCiclos.pop();
                return
            }
        }
        if(seleccionar.BloqueSwitch && !ejecutado)
        {
            EjecutarBloque(seleccionar.BloqueSwitch, nuevo)
        }
        pilaCiclos.pop();
        return
    }
	//Mientras
	const Mientras = function(Condicion, Bloque)
    {
        return {
            Condicion: Condicion,
            Bloque: Bloque,
            TipoInstruccion:"mientras"
        }
    }
  
  	function EjecutarMientras(mientras,ent)
	{
        pilaCiclos.push("ciclo");        
      	nuevo=Entorno(ent);
        while(true)
        {
        	var resultadoCondicion = Evaluar(mientras.Condicion, ent)
            if(resultadoCondicion.Tipo=="booleano")
            {
            	if(resultadoCondicion.Valor)
            	{
                	var res=EjecutarBloque(mientras.Bloque, nuevo);
                	if(res && res.TipoInstruccion=="insBreak")
                	{
                		break;
                	}
                    else if (res)
                    {
                        pilaCiclos.pop();
                        return res
                    }
            	}
            	else
            	{
                	break;
              	}
            }
            else
            {
                console.log("Se esperaba una condicion dentro del Mientras")
                pilaCiclos.pop();
                return
            }
		}
        pilaCiclos.pop();
        return
	}
	const Desde = function(ExpDesde, ExpHasta, ExpPaso, Bloque, ent)
    {
        return {
            ExpDesde: ExpDesde,
            ExpHasta: ExpHasta,
            ExpPaso: ExpPaso,
            Bloque: Bloque,
            TipoInstruccion:"desde"
        }
    }
  
	function EjecutarDesde(Desde, ent)
	{
        pilaCiclos.push("ciclo"); 
      	var nuevo=Entorno(ent);
    	//controlador de la condicion
    	if( Desde.ExpDesde.TipoInstruccion == "crear" )
    	{
      		EjecutarCrear(Desde.ExpDesde, nuevo);
    	}
    	else
    	{
        	EjecutarAsignar(Desde.ExpDesde, nuevo);
    	}
      	//mientras no se llegue al hasta
    	var paso = Evaluar(Desde.ExpPaso, ent);
    	var hasta = Evaluar(Desde.ExpHasta, ent);
    	var Simbolo=setSimbolos(Desde.ExpDesde.Id,"ID")
        if( !(paso.Tipo=="numero" && hasta.Tipo=="numero") )
        {
            pilaCiclos.pop();
            console.log("Se esperaban valores numericos en el Desde");
            return;
        }
    	while(true)
    	{
        	var inicio=Evaluar(Simbolo, nuevo)
            if( inicio.Tipo != "numero" )
            {
                pilaCiclos.pop();
                console.log("Se esperabam valores numericos en el Desde");
                return;
            }
        	if(paso.Valor > 0)
        	{
                if(inicio.Valor <= hasta.Valor)
                {
                    var res=EjecutarBloque(Desde.Bloque, nuevo);
                    if(res && res.TipoInstruccion=="insBreak")
                    {
                        break;
                    }
                    else if (res)
                    {
                        pilaCiclos.pop();
                        return res
                    }
                }
                else
                {
                  break;
                }  
        	}
        	else
        	{
            	if(inicio.Valor >= hasta.Valor)
            	{
            		var res=EjecutarBloque(Desde.Bloque, nuevo);
            		if(res && res.TipoInstruccion=="insBreak")
                	{
                    	break;
                	}
                }
                else
                {
                	break;
                }
        	}
        	EjecutarAsignar(Asignar(Desde.ExpDesde.Id,setOperacion(Simbolo,paso,"+")), nuevo)
    	}
        pilaCiclos.pop();
        return;
	}
    //Funcion
    const Funcion=function(Id, Parametros, Tipo, Bloque)
    {
        return{
            Id: Id,
            Parametros: Parametros,
            Bloque: Bloque,
            Tipo: Tipo,
            TipoInstruccion: "funcion"
        }
    }
    function EjecutarFuncion(elemento,ent)
    {
        var nombrefuncion = elemento.Id + "$";
        for(var Parametro of elemento.Parametros)
        {
            nombrefuncion+=Parametro.Tipo;
        }
        if (ent.tablaSimbolos.has(nombrefuncion))
      	{
            console.log("La funcion ",crear.Id," ya ha sido declarada");
      		return;
      	}
        ent.tablaSimbolos.set(nombrefuncion, elemento);
    }
    //Llamada
    const Llamada=function(Id,Params)
    {
        return {
            Id: Id,
            Params: Params,
            TipoInstruccion: "llamada"
        }
    }
    function EjecutarLlamada(Llamada,ent)
    {
        var nombrefuncion = Llamada.Id+"$";
        var Resueltos = [];
        for(var param of Llamada.Params)
        {
            var valor = Evaluar(param,ent);
            nombrefuncion += valor.Tipo;
            Resueltos.push(valor);
        }
        var temp = ent;
        var simboloFuncion = null;
      	while(temp!=null)
        {
            if (temp.tablaSimbolos.has(nombrefuncion))
            {
                // evaluar el resultado de la expresión 
                simboloFuncion = temp.tablaSimbolos.get(nombrefuncion);	
                break;
            }
            temp=temp.anterior;
        }
        if(!simboloFuncion){
            console.log("No se encontró la funcion "+Llamada.Id + " con esa combinacion de parametros")
            return setSimbolos("@error@","error");
        } 
        pilaFunciones.push(Llamada.Id);
        var nuevo=Entorno(EntornoGlobal)
        var index=0;
        for(var crear of simboloFuncion.Parametros)
        {
            crear.Expresion=Resueltos[index];
            EjecutarCrear(crear,nuevo);
            index++;
        }
        var retorno=setSimbolos("@error@","error");
        var res = EjecutarBloque(simboloFuncion.Bloque, nuevo)
        if(res)
        {
            if(res.Tipo=="void" )
            {
                if(simboloFuncion.Tipo!="void")
                {
                    console.log("No se esperaba un retorno");
                    retorno=setSimbolos("@error@","error");
                }
                else
                {
                    retorno=setSimbolos("@vacio@","vacio")
                }
            }
            else
            {
                var exp=Evaluar(res,nuevo);
                if(exp.Tipo!=simboloFuncion.Tipo)
                {
                    console.log("El tipo del retorno no coincide");
                    retorno=setSimbolos("@error@","error");
                }
                else
                {
                    retorno=exp;
                }
            }
        }
        else
        {
            if(simboloFuncion.Tipo!="void")
            {
                console.log("Se esperaba un retorno");
                retorno=setSimbolos("@error@","error");
            }
            else
            {
                retorno=setSimbolos("@vacio@","vacio")
            }
        }
        pilaFunciones.pop();
        return retorno;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 53; 
break;
case 1:// se ignoran espacios en blanco
break;
case 2:console.error('Este es un comentario simple');
break;
case 3:console.error('Este es un comentario multiple');
break;
case 4:return 7;
break;
case 5:return 'LOWER';
break;
case 6:return 'UPPER';
break;
case 7:return 'LENGTH';
break;
case 8:return 'TRUNCATE';
break;
case 9:return 'ROUND';
break;
case 10:return 'TYPEOF';
break;
case 11:return 'CHARARRAY';
break;
case 12:return 'EXEC';
break;
case 13:return 'NEW';
break;
case 14:return 31;
break;
case 15:return 35;
break;
case 16:return 32;
break;
case 17:return 34;
break;
case 18:return 33;
break;
case 19:return 'SALTOLINEA';
break;
case 20:return 'BARINVERSA';
break;
case 21:return 'COMILLASIM';
break;
case 22:return 'COMILLADOB';
break;
case 23:return 'TABULAR';
break;
case 24:return 'WHILE';
break;
case 25:return 'DO';
break;
case 26:return 25;
break;
case 27:return 27;
break;
case 28:return 'FOR';
break;
case 29:return 17;
break;
case 30:return 23;
break;
case 31:return 21;
break;
case 32:return 16;
break;
case 33:return 'CONTINUE';
break;
case 34:return 'RETURN';
break;
case 35:return 'VOID';
break;
case 36:return 24;
break;
case 37:return 'COMA';
break;
case 38:return 11;
break;
case 39:return 18;
break;
case 40:return 20;
break;
case 41:return 8;
break;
case 42:return 10;
break;
case 43:return 'CORIZQ';
break;
case 44:return 'CORDER';
break;
case 45:return 'O_MAS';
break;
case 46:return 'O_MENOS';
break;
case 47:return 'O_POR';
break;
case 48:return 'O_DIVIDIDO';
break;
case 49:return 36;
break;
case 50:return 37;
break;
case 51:return 38;
break;
case 52:return 39;
break;
case 53:return 40;
break;
case 54:return 41;
break;
case 55:return 'INCREMENTO'
break;
case 56:return 'DECREMENTO'
break;
case 57:return 46;
break;
case 58:return 47;
break;
case 59:return 42;
break;
case 60:return 43;
break;
case 61:return 44;
break;
case 62:return 45;
break;
case 63:return 49;
break;
case 64:return 48
break;
case 65:return 50;
break;
case 66:return 51;
break;
case 67:return 52;
break;
case 68:return 29;
break;
case 69:return 'OPTERNARIO'
break;
case 70:return 'CONCAT';
break;
case 71: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 54; 
break;
case 72:return 55;
break;
case 73:return 56;
break;
case 74:return 28;
break;
case 75:return 5;
break;
case 76: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:"((\\")|[^\n\"])*")/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\\\n)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\")/i,/^(?:\\\t)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:&)/i,/^(?:'((\\')|[^\n\'])')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}